{{- $package := $.File.Options.GoPackage | replace "./;" "" -}}
package {{$package}}_gen //nolint

import (
	"context"
{{- range $m := .Service.Method}}
{{- if and .ServerStreaming (not .ClientStreaming)}}
  "io"
  {{break}}
{{end}}{{end}}

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"moul.io/adapterkit/pkg/lib"

	{{$package}} "$[ADAPTERKIT_LOGIC_PACKAGE]"
)
{{define "notOnFirstIter"}}{{with $list := .}}{{with $i := index $list 0}}{{with $toPrint := index $list 1}}
	{{- if ne $i 0 -}} {{$toPrint}} {{- end -}}
{{end}}{{end}}{{end}}{{end -}}

{{- define "upperFormat" -}}
	{{with $w := . -}}
	{{$list := regexSplit "\\." $w -1 -}}
	{{$f := index $list 0 -}}
	{{range $i, $d := $list -}}
	    {{if ne 0 $i -}} {{$f = cat $f "_" -}} {{$f = cat $f $d|title -}} {{$f = $f | replace " " ""}} {{- end}}
	{{- end}}
	{{- $f | printf "%s"}}
{{- end}}{{end}}

{{- define "iterateOnFieldsName&Type"}}{{with $t := .}}
	{{- range $i, $f := $t.Field -}}{{$f.Name -}}{{$var := $f | goTypeWithPackage}} {{template "upperFormat" $var}},
{{- end}}{{end}}{{end}}

{{- define "iterateOnFieldsToFill"}}{{with $t := .}}
	{{- range $i, $f := $t.Field -}}{{template "notOnFirstIter" $x := list $i ", " -}}  {{$f.Name | camelCase}}: {{$f.Name}}
{{- end}}{{end}}{{end}}


{{- range $m := .Service.Method}}
{{- if and (not $m.ServerStreaming) (not $m.ClientStreaming)}}
func Svc{{$m.Name}}
{{- with $t := $m.InputType | getMessageType $.File -}}
	( {{- template "iterateOnFieldsName&Type" $t}} svc {{$package}}.{{$package | title}}SvcServer)
{{- end}}
{{- with $t := $m.OutputType | getMessageType $.File -}}
	{{""}} ({{"*"}}{{$package}}{{"." -}}{{$t.Name}}, error)
{{- end}} {
	ctx := context.Background()

	conn, err := grpc.DialContext(ctx, "",
		grpc.WithTransportCredentials(insecure.NewCredentials()),
		grpc.WithContextDialer(lib.Dialer(svc, {{$package}}.Register{{$package | title}}SvcServer)))
	if err != nil {
		return nil, err
	}
	defer conn.Close()

	client := {{$package}}.New{{$package | title}}SvcClient(conn)
	req := &{{$package}}.
	{{- with $t := $m.InputType | getMessageType $.File}}
	    {{- $t.Name}} {{- "{" -}} {{template "iterateOnFieldsToFill" $t -}} }
	{{- end}}
	res, err := client.{{$m.Name}}(ctx, req)
	if err != nil {
		return nil, err
	}

	return res, nil
}
{{- else if and $m.ServerStreaming (not $m.ClientStreaming)}}
func Svc{{$m.Name}}
{{- with $t := $m.InputType | getMessageType $.File -}}
	( {{- template "iterateOnFieldsName&Type" $t}} svc {{$package}}.{{$package | title}}SvcServer
{{- end}}
{{- with $t := $m.OutputType | getMessageType $.File -}}
 {{""}} ,{{"callback func (*"}}{{$package}}{{"." -}}{{$t.Name}}, error) error) error
{{- end}} {
  ctx := context.Background()

	conn, err := grpc.DialContext(ctx, "",
		grpc.WithTransportCredentials(insecure.NewCredentials()),
		grpc.WithContextDialer(lib.Dialer(svc, {{$package}}.Register{{$package | title}}SvcServer)))
	if err != nil {
		return err
	}
	defer conn.Close()

	client := {{$package}}.New{{$package | title}}SvcClient(conn)

    req := &{{$package}}.
    {{- with $t := $m.InputType | getMessageType $.File}}
      {{- $t.Name}} {{- "{" -}} {{template "iterateOnFieldsToFill" $t -}} }
    {{- end}}
    c, err := client.{{$m.Name}}(ctx, req)
    if err != nil {
      return err
    }

    for {
      res, err := c.Recv()
      if err == io.EOF {
        break
      }
      err = callback(res, err)
  	  if err != nil {
  		  return err
  		}
    }

    return nil
}
{{- else}}
func Svc{{$m.Name}}
{{- with $t := $m.InputType | getMessageType $.File -}}
	( {{- template "iterateOnFieldsName&Type" $t}} svc {{$package}}.{{$package | title}}SvcServer)
{{- end}}
{{- with $t := $m.OutputType | getMessageType $.File -}}
	{{""}} ({{"*"}}{{$package}}{{"." -}}{{$t.Name}}, error)
{{- end}} {
	panic("not implemented")
}
{{- end}}
{{end -}}
