{{- $package := $.File.Options.GoPackage | replace "./;" "" -}}
package {{$package}}_gen //nolint

{{- define "upperFormat" -}}
	{{with $w := . -}}
	{{$list := regexSplit "\\." $w -1 -}}
	{{$f := index $list 0 -}}
	{{range $i, $d := $list -}}
	    {{if ne 0 $i -}} {{$f = cat $f "_" -}} {{$f = cat $f $d|title -}} {{$f = $f | replace " " ""}} {{- end}}
	{{- end}}
	{{- $f | printf "%s"}}
{{- end}}{{end}}

{{- define "iterateOnFieldsName&Type"}}{{with $t := .}}
	{{- range $i, $f := $t.Field -}}{{$f.Name -}}{{$var := $f | goTypeWithPackage}} {{template "upperFormat" $var}},
{{- end}}{{end}}{{end}}

{{- define "iterateOnFieldsName"}}{{with $t := .}}
	{{- range $i, $f := $t.Field -}} {{$f.Name -}},
{{- end}}{{end}}{{end}}

import (
    {{$package}} "$[ADAPTERKIT_LOGIC_PACKAGE]"
)

type Request struct {
	RequestType string `json:"requestType"`
{{- range $m := .Service.Method}}
    {{$m.Name}} *{{$package}}.
     	{{- with $t := $m.InputType | getMessageType $.File}}
     	    {{- $t.Name}}
     	{{- end}} `json:"{{$m.Name}}"`
{{- end}}
}

type Response struct {
{{- range $m := .Service.Method}}
    {{$m.Name}} *{{$package}}.
     	{{- with $t := $m.OutputType | getMessageType $.File}}
     	    {{- $t.Name}}
     	{{- end}} `json:"{{$m.Name}}"`
{{- end}}

}

{{- range $m := .Service.Method}}
func Svc{{$m.Name}}
{{- with $t := $m.InputType | getMessageType $.File -}}
    ( {{- template "iterateOnFieldsName&Type" $t}} svc {{$package}}.{{$package | title}}SvcServer)
{{- end -}}
(Response, error) {
{{with $t := $m.InputType | getMessageType $.File}}
    res, err := svc{{$m.Name}}({{template "iterateOnFieldsName" $t}} svc)
{{end}}
    if err != nil {
        return Response{}, err
    }

    return Response{ {{- $m.Name}}: res}, nil
}

{{end}}
